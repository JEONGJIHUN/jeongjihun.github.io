{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Causes-of-Memory-Leaks-in-JavaScript-and-How-to-Avoid-Them","result":{"data":{"markdownRemark":{"id":"8da868e0-ddb8-5d6e-9d0a-545e51478930","html":"<p><a href=\"https://www.ditdot.hr/en/causes-of-memory-leaks-in-javascript-and-how-to-avoid-them\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Causes of Memory Leaks in JavaScript and How to Avoid Them</a></p>\n<p>위의 블로그를 번역하였습니다.</p>\n<p>SPA (Single Page Application)의 등장으로 우리는 좋은 메모리 관련 코딩 방법에 더 많은 관심을 기울이게 되었습니다. SPA를 사용하면 같은 페이지에 훨씬 더 오래 머무를 수 있습니다. 완전히 다시 로드되지 않은 페이지가 점점 더 많은 메모리를 사용하여 점진적으로 시작되면 성능에 심각한 영향을 미치고 브라우저 탭이 충돌할 수도 있습니다.</p>\n<p>메모리 사용량을 확인하는 가장 빠른 방법은 브라우저 작업 관리자를 살펴 보는 것입니다.</p>\n<p>개발자 도구는 보다 고급 메모리 관리 방법을 제공합니다. Chrome의 실적 도구로 기록하면 페이지가 실행될 때의 실적을 시각적으로 분석 할 수 있습니다.</p>\n<h2 id=\"javascript-코드의-일반적인-메모리-누수-소스\" style=\"position:relative;\"><a href=\"#javascript-%EC%BD%94%EB%93%9C%EC%9D%98-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%88%84%EC%88%98-%EC%86%8C%EC%8A%A4\" aria-label=\"javascript 코드의 일반적인 메모리 누수 소스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript 코드의 일반적인 메모리 누수 소스</h2>\n<ol>\n<li>\n<p><strong>우발적 글로벌 변수</strong></p>\n<p>전역 변수는 항상 루트에서 사용할 수 있으며 가비지 수집되지 않습니다. 엄격하지 않은 모드에서는 일부 실수로 인해 로컬 범위에서 전역 범위로 변수가 누출됩니다.</p>\n<ul>\n<li>선언되지 않은 변수에 값을 할당</li>\n<li>전역 객체를 가리키는 ‘this’를 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">createGlobalVariables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// 선언되지 않은 변수에 값을 할당</span>\n leaking1 <span class=\"token operator\">=</span> <span class=\"token string\">\"I leak into the global scope\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 전역 객체를 가리키는 'this'를 사용</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>leaking2 <span class=\"token operator\">=</span> <span class=\"token string\">\"I also leak into the global scope\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">createGlobalVariables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>leaking1<span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>leaking2<span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>이를 방지하는 방법</strong> : 엄격한 모드는 예제의 코드에서 오류가 발생하기 때문에 실수로 누출되는 것을 방지합니다.</p>\n</li>\n<li>\n<p><strong>폐쇄</strong></p>\n<p>함수 범위 변수는 함수가 호출 스택을 종료 한 후 함수 외부에 변수를 가리키는 참조가 없는 경우 정리됩니다. 함수가 실행을 마치고 실행 컨텍스트와 변수 환경이 오래되었지만 클로저는 변수를 참조하고 활성 상태로 유지합니다.</p>\n<p><strong>이를 방지하는 방법 :</strong> 클로저는 불가피하고 JavaScript에서 없어서는 안될 부분이므로 다음을 수행하는 것이 중요합니다.</p>\n<ul>\n<li>클로저가 언제 만들어졌으며 어떤 객체가 유지되는지 이해하고,</li>\n<li>클로저의 예상 수명과 사용량을 이해합니다 (특히 콜백으로 사용되는 경우).</li>\n</ul>\n</li>\n<li>\n<p><strong>타이머</strong></p>\n<p>콜백에서 일부 객체를 참조하는 <code class=\"language-text\">setTimeout</code> 또는 <code class=\"language-text\">setInterval</code> 을 갖는 것이 객체가 가비지 수집되는 것을 방지하는 가장 일반적인 방법입니다. 코드에서 반복 타이머를 설정하면 콜백을 호출 할 수 없는 한 타이머 콜백의 객체에 대한 참조가 활성 상태를 유지합니다.</p>\n<p>아래 data에서 타이머를 해제 한 후에만 개체를 가비지 수집을 할 수 있습니다. <code class=\"language-text\">setInterval</code> 에 대한 참조가 없으므로 절대로 사용되지 않지만 앱을 중지 할 때까지 <code class=\"language-text\">setInterval</code> 절대로 지울 수 없으며 data.hugeString메모리에 유지됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   counter<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n   hugeString<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   data<span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// data object is now part of the callback's scope</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// how do we stop it?</span></code></pre></div>\n<p><strong>이를 방지하는 방법 :</strong> 특히 콜백의 수명이 정의되지 않았거나 무기한 인 경우 :</p>\n<ul>\n<li>타이머의 콜백에서 참조 된 객체를 인식하고</li>\n<li>필요한 경우 타이머에서 반환 된 핸들을 사용하여 취소합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// 'unpacking' the data object</span>\n <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">const</span> hugeString <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// gets removed when the setCallback returns</span>\n <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// only counter is part of the callback's scope</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> timerId <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// saving the interval ID</span>\n\n<span class=\"token comment\">// doing something ...</span>\n\n<span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timerId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// stopping the timer i.e. if button pressed</span></code></pre></div>\n</li>\n<li>\n<p><strong>이벤트 리스너</strong></p>\n<p>활성 이벤트 리스너는 해당 범위에서 캡처된 모든 변수가 가비지 수집되지 않도록 합니다. 추가되면 이벤트 리스너는 다음까지 계속 유지됩니다.</p>\n<ul>\n<li>명시 적으로 제거 <code class=\"language-text\">removeEventListener</code></li>\n<li>연관된 DOM 요소가 제거됩니다.</li>\n</ul>\n<p>일부 유형의 이벤트의 경우 사용자가 여러 번 클릭해야하는 버튼과 같은 페이지를 떠날 때까지 유지됩니다. 그러나 때때로 이벤트 리스너가 정해진 횟수만큼 실행되기를 원합니다.</p>\n<p>익명 인라인 함수는 이벤트 리스너로 사용하게 되면 <code class=\"language-text\">removeEventListener</code>를 사용하여 삭제할 수 없습니다.</p>\n<p><strong>이를 방지하는 방법</strong> : 이벤트 리스너는 더 이상 필요하지 않은 경우 이를 가리키는 참조를 작성하여 <code class=\"language-text\">removeEventListener</code>에 전달하여 항상 등록 해제해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>hugeString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keyup\"</span><span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// named function can be referenced here...</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keyup\"</span><span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ...and here</span></code></pre></div>\n<p>이벤트 리스너가 한 번만 실행 되어야하는 경우 <code class=\"language-text\">addEventListener</code>에서 추가 옵션인 세 번째 매개 변수를 사용할 수 있습니다. <code class=\"language-text\">{once : true}</code>가 <code class=\"language-text\">addEventListener</code>에 세 번째 매개 변수로 전달되면 리스너 함수는 이벤트를 한 번 처리 한 후 자동으로 제거됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>\n <span class=\"token string\">\"keyup\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token keyword\">function</span> <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>hugeString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">{</span> once<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// listener will be removed after running once</span></code></pre></div>\n</li>\n<li>\n<p><strong>캐시</strong></p>\n<p>사용하지 않는 객체를 제거하지 않고 크기를 제한하는 논리가 없으면 캐시에 메모리를 계속 추가하면 캐시가 무한대로 커질 수 있습니다.</p>\n<p><strong>이를 방지하는 방법</strong> : 이 문제를 해결하기 위해 <code class=\"language-text\">WeakMap</code>을 사용할 수 있습니다. 객체만 키로 받아들이는 약한 키 참조가 있는 데이터 구조입니다. 객체를 키로 사용하고 해당 객체에 대한 유일한 참조인 경우 관련 항목이 캐시에서 제거되고 가비지 수집됩니다. 예제에서 <code class=\"language-text\">user_1</code> 에 null 로 대체한 후 다음 가비지 콜렉션 후에 연관된 항목이 WeakMap에서 자동으로 삭제됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> user_1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Peter\"</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token number\">12345</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> user_2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span> id<span class=\"token operator\">:</span> <span class=\"token number\">54321</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> weakMapCache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>weakMapCache<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> has an id of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>obj<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n   weakMapCache<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">\"computed\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>weakMapCache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cached\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">cache</span><span class=\"token punctuation\">(</span>user_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Peter has an id of 12345', 'computed']</span>\n<span class=\"token function\">cache</span><span class=\"token punctuation\">(</span>user_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['Mark has an id of 54321', 'computed']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>weakMapCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ((…) => \"Peter has an id of 12345\", (…) => \"Mark has an id of 54321\"}</span>\nuser_1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// removing the inactive user</span>\n\n<span class=\"token comment\">// Garbage Collector</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>weakMapCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ((…) => \"Mark has an id of 54321\") - first entry gets garbage collected</span></code></pre></div>\n</li>\n<li>\n<p><strong>분리된 DOM 요소</strong></p>\n<p>DOM 노드에 JavaScript에서 직접 참조가 있는 경우 DOM 트리에서 노드를 제거한 후에도 가비지 수집을 방지할 수 있습니다.</p>\n<p><strong>이를 방지하는 방법</strong> : 가능한 해결책 중 하나는 DOM 참조를 로컬 범위로 옮기는 것입니다. 아래 예제에서 <code class=\"language-text\">appendElement</code> 함수가 완료된 후 DOM 요소를 가리키는 변수가 제거됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n div<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"detached\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">return</span> div<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// DOM references are inside the function scope</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">appendElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> detachedDiv <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>detachedDiv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">appendElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">deleteElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"detached\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">deleteElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no detached div#detached elements in the Heap Snapshot</span></code></pre></div>\n</li>\n</ol>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<p>사소한 앱을 다룰 때 JavaScript 메모리 문제를 식별하고 수정하는 것은 매우 어려운 작업으로 바뀔 수 있습니다. 이러한 이유로 메모리 관리 프로세스의 필수 부분은 일반적인 메모리 누수 소스를 이해하여 처음부터 발생하지 않도록 하는 것입니다. 결국, 메모리와 성능에 있어서는 사용자 경험이 위험에 처하며 이것이 가장 중요한 것입니다.</p>","fields":{"slug":"/posts/Causes-of-Memory-Leaks-in-JavaScript-and-How-to-Avoid-Them","tagSlugs":["/tag/javascript/","/tag/memory/","/tag/management/"]},"frontmatter":{"date":"2020-06-20","description":"SPA (Single Page Application)의 등장으로 우리는 좋은 메모리 관련 코딩 방법에 더 많은 관심을 기울이게 되었습니다. SPA를 사용하면 같은 페이지에 훨씬 더 오래 머무를 수 있습니다. 완전히 다시 로드되지 않은 페이지가 점점 더 많은 메모리를 사용하여 점진적으로 시작되면 성능에 심각한 영향을 미치고 브라우저 탭이 충돌할 수도 있습니다.","tags":["Javascript","Memory","Management"],"title":"JavaScript에서 메모리 누수의 원인 및 해결 방법","socialImage":""}}},"pageContext":{"slug":"/posts/Causes-of-Memory-Leaks-in-JavaScript-and-How-to-Avoid-Them"}}}