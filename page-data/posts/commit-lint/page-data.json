{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/commit-lint","result":{"data":{"markdownRemark":{"id":"8bb1213e-fb07-5378-9abf-03bbf6aca0f7","html":"<p>eslint, prettier 와 함께 lint-staged, commit lint 적용법에 대해 간단히 작성해보려한다. </p>\n<h3 id=\"link-staged\" style=\"position:relative;\"><a href=\"#link-staged\" aria-label=\"link staged permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>link-staged</h3>\n<p>먼저 eslint 와 prettier 가 적용되어 있다는 가정하에, eslint,prettier 로 syntax 및 포매팅 스타일 정리가 잘 끝났는지 확인해주는 도구다. 자동 저장으로 어느 정도 실수를 잡아줄 수 있겠지만 좀 더 확실히 staged 된 파일을 체크함으로서, lint 를 통과하지 못하면 커밋을 막아준다. 자세한 설명을 생략하겠지만 lint-staged 와 함께 사용하는 githooks 를 도와주는 husky 로 <strong>공통된 스타일 푸시함으로써 협업에서 코드 리뷰나 타임 로스를 잡을 수 있다.</strong> </p>\n<h3 id=\"commit-lint\" style=\"position:relative;\"><a href=\"#commit-lint\" aria-label=\"commit lint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Commit lint</h3>\n<p>이와 함께 commit lint 를 사용해 정해둔 커밋 컨벤션에 맞춰 커밋을 하지 않을 경우 커밋을 막아주는 도구도 추천한다. 크게 type, scope, subject 를 사용하며 body 와 footer에도 규칙을 적용할 수 있다. 타입의 규칙에는 일반적으로 아래와 같은 흐름으로 사용할 것이라고 생각한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">type<span class=\"token punctuation\">(</span>scope?<span class=\"token punctuation\">)</span>: subject\nbody?\nfooter?</code></pre></div>\n<ul>\n<li>기능(feat): 새로운 기능을 추가</li>\n<li>버그(fix): 버그 수정</li>\n<li>리팩토링(refactor): 코드 리팩토링</li>\n<li>형식(style): 코드 형식, 정렬, 주석 등의 변경(동작에 영향을 주는 코드 변경 없음)</li>\n<li>테스트(test): 테스트 추가, 테스트 리팩토링(제품 코드 수정 없음, 테스트 코드에 관련된 모든 변경에 해당)</li>\n<li>문서(docs): 문서 수정(제품 코드 수정 없음)</li>\n<li>기타(chore): 빌드 업무 수정, 패키지 매니저 설정 등 위에 해당되지 않는 모든 변경(제품 코드 수정 없음)</li>\n</ul>\n<p>예를 들어 새로운 커밋 lint 를 적용하는 커밋을 추가하려고 할 때, 아래와 같이 사용하면 된다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">// 보통 scope 에는 nickname 과 각종 지라 티켓 네임을 함께 사용하고 있다.\nfeat<span class=\"token punctuation\">(</span>ticketname<span class=\"token punctuation\">)</span>: apply commit lint</code></pre></div>\n<p>commit lint 를 사용함으로서, 팀원의 커밋을 내용을 직관적으로 파악할 수 있으며 d이것 또한 불필요한 타임 로스를 줄이며 생산성 향상에 도움을 준다고 판단해 사용하고 있다.</p>\n<p>스타일 부분은 주관적일 수도 있기에 팀원과의 충분한 상의를 거친 뒤에 적용해보길 바란다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">//package.json  </span>\n<span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"pre-commit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"commit-msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commitlint -E HUSKY_GIT_PARAMS\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"*.{ts,tsx,js,jsx}\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"eslint --fix\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"prettier --parser typescript --write\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"git add\"</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//commitlint.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@commitlint/config-conventional'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'subject-case'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'always'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sentence-case'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'type-enum'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'always'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'feat'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fix'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hot_fix'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'docs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'style'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'refactor'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chore'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wording'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>References</strong></h3>\n<ul>\n<li><a href=\"https://commitlint.js.org/#/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://commitlint.js.org/</a></li>\n</ul>","fields":{"slug":"/posts/commit-lint","tagSlugs":["/tag/commit-lint/","/tag/husky/","/tag/link-staged/"]},"frontmatter":{"date":"2021-01-24","description":"eslint, prettier 와 함께 lint-staged, commit lint 적용법에 대해 간단히 작성해보려한다.","tags":["commit-lint","husky","link-staged"],"title":"Commit lint","socialImage":""}}},"pageContext":{"slug":"/posts/commit-lint"}}}