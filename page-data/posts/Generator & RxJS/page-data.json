{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Generator & RxJS","result":{"data":{"markdownRemark":{"id":"1725c45c-0d36-55d4-b142-3ee64de08171","html":"<h2 id=\"index\" style=\"position:relative;\"><a href=\"#index\" aria-label=\"index permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Index</h2>\n<ul>\n<li><a href=\"#Intro\">Intro</a></li>\n<li>\n<p><a href=\"#Main\">Main</a></p>\n<ul>\n<li><a href=\"#Generator\">Generator</a></li>\n<li><a href=\"#RxJS\">RxJS</a></li>\n</ul>\n</li>\n<li><a href=\"#Conclusion\">Conclusion</a></li>\n</ul>\n<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>2부에서는 제너레이터의 간단한 구조 및 예시를 소개한 다음, RxJS 에 대한 간략한 설명과 예시로 마치겠습니다.</p>\n<h2 id=\"main\" style=\"position:relative;\"><a href=\"#main\" aria-label=\"main permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Main</h2>\n<h3 id=\"generator\" style=\"position:relative;\"><a href=\"#generator\" aria-label=\"generator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generator</h3>\n<p>1부에서 설명한 대로 제너레이터는 Generator 객체를 반환하며 컨택스트를 저장한 상태로 generator function 을 빠져나갔다가 돌아올 수 있는 함수입니다.</p>\n<p>그렇다면 제너레이터 함수는 왜 쓸까요?</p>\n<p>co.js 라이브러리를 사용하면 자바스크립트의 비동기적인 특성을 동기적으로 작성할 수 있게 해줍니다. 그렇기에 콜백 지옥을 벗어날 수 있게 해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//Promise/then</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchJson</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">url</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span> <span class=\"token operator\">=></span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ERROR: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//generator/yield</span>\n<span class=\"token keyword\">const</span> fetchJson <span class=\"token operator\">=</span> co<span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ERROR: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>async/await 와 거의 비슷한 맥락으로 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> iterableObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> step <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        step<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>step <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'This'</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>step <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'is'</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>step <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token string\">'MMT Tech Blog.'</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> val <span class=\"token keyword\">of</span> iterableObj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This</span>\n<span class=\"token comment\">// is</span>\n<span class=\"token comment\">// MMT Tech Blog.</span></code></pre></div>\n<p>또한 이렇게 <code class=\"language-text\">next()</code> 와 <code class=\"language-text\">[symbol.iterator]()</code> 를 사용해 데이터를 관리할 수 있습니다.</p>\n<p>위와 같은 코드를 <code class=\"language-text\">yield</code> 를 사용해 간단히 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">iterableObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'This'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'is'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token string\">'MMT Tech Blog.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> val <span class=\"token keyword\">of</span> <span class=\"token function\">iterableObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This</span>\n<span class=\"token comment\">// is</span>\n<span class=\"token comment\">// MMT Tech Blog.</span></code></pre></div>\n<p>Generator 의 또다른 장점은 Lazy Evaluation 이 가능하므로 우리가 필요할 때까지 계산을 미룰 수 있습니다.</p>\n<p>Generator 는 새로운 값을 받으면 깨어나므로 Generator 는 observer 라고도 합니다. 이러한 동작은 어떤 의미에서는 값을 계속 관찰하고 Generator 가 값을 가졌을 때, Generator 가 동작한다고 생각할 수 있습니다.</p>\n<p>지금까지 알아본 <code class=\"language-text\">Callback function</code> 이나 <code class=\"language-text\">Promise</code>, <code class=\"language-text\">Generator</code>, <code class=\"language-text\">async/await</code> 로 HTTP 요청과 같은 비동기 처리를 구현할 수 있습니다.</p>\n<p><code class=\"language-text\">Callback function</code> 을 사용하는 경우, error handling 이 어렵고 콜백 지옥 등의 문제가 발생하므로 <code class=\"language-text\">Promise</code> 를 사용하는 것이 더 나은 방법이지만 서버로 보낸 요청은 취소할 수 없다는 점입니다.</p>\n<p>그러다 저희 팀원 grapgrap 님의 추천으로 ReactiveX 에 대해 알게 되었습니다.</p>\n<p>ReactiveX는 관찰 가능한 스트림을 사용한 비동기 및 이벤트 기반 프로그래밍을 위한 API입니다.\nRx 는 .NET 에서 사용하기 위해 만든 오픈 소스 라이브러리였지만 지금은 넷플릭스에서 만든 RxJava 와 RxJS 가 각광을 받고 있습니다.</p>\n<p>그 중, RxJS 의 <code class=\"language-text\">Observable</code> 은 기존 비동기 처리 방식의 단점을 해결할 수 있는 더 나은 대안이라고 생각해 소개해 보려 합니다.</p>\n<h3 id=\"rxjs\" style=\"position:relative;\"><a href=\"#rxjs\" aria-label=\"rxjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RxJS</h3>\n<h4 id=\"rxjs는-observable-을-사용하여-비동기-및-이벤트-기반-프로그램을-작성하기-위한-라이브러리입니다\" style=\"position:relative;\"><a href=\"#rxjs%EB%8A%94-observable-%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%B0%8F-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EA%B8%B0%EB%B0%98-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%84-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"rxjs는 observable 을 사용하여 비동기 및 이벤트 기반 프로그램을 작성하기 위한 라이브러리입니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RxJS는 Observable 을 사용하여 비동기 및 이벤트 기반 프로그램을 작성하기 위한 라이브러리입니다.</h4>\n<h4 id=\"the-general-theory-of-reactivity\" style=\"position:relative;\"><a href=\"#the-general-theory-of-reactivity\" aria-label=\"the general theory of reactivity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The General Theory of Reactivity</h4>\n<p><img src=\"https://user-images.githubusercontent.com/50353227/71554258-5c2e8100-2a60-11ea-986c-76086b244e29.png\" alt=\"theGeneralTheoryOfReactivity\"></p>\n<ul>\n<li><strong>Promise 는 하나의 비동기 결과를 리턴하기 위해 사용됩니다.</strong></li>\n<li><strong>Function 은 하나의 결과를 위해 사용되고,</strong></li>\n<li><strong>Generator 는 iterator 를 제공하기 위해 사용됩니다.</strong></li>\n<li><strong>Observable 은 여러 비동기 값들을 지원하는 데이터 유형을 제공합니다.</strong></li>\n<li>\n<p><strong>Pull Scenario</strong></p>\n<ul>\n<li>외부에서 명령하여 응답받고 처리합니다.</li>\n<li>데이터를 가지고 오기 위해서는 계속 호출해야 합니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>Push Scenario</strong></p>\n<ul>\n<li>외부에서 명령하고 기다리지 않고, 응답이 오면 그때 반응하여 처리합니다</li>\n<li>데이터를 가지고 오기 위해서 subscribe 해야 합니다.</li>\n</ul>\n</li>\n</ul>\n<p>시간 축을 따라 연속적으로 흐르는 데이터, 즉 데이터 스트림을 생성하고 방출하는 객체를 Observable 이라 합니다.</p>\n<p>Observable 을 subscribe 하여 Observable 이 방출한 Notification 을 전파받아 사용하는 객체를 Observer 라 합니다.</p>\n<p>Observer 는 <code class=\"language-text\">next</code>, <code class=\"language-text\">error</code>, <code class=\"language-text\">complete</code> 함수를 가진 객체를 가집니다. Observable 에 의해 데이터가 전달될 때는 Generator 에서의 <code class=\"language-text\">next</code>, <code class=\"language-text\">throw</code>, <code class=\"language-text\">return</code> 과 비슷한 <code class=\"language-text\">next</code> 함수가 호출되고, 에러가 발생했을 때는 <code class=\"language-text\">error</code> 함수, 데이터 전달이 완료되었을 때는 <code class=\"language-text\">complete</code> 함수가 호출되어 집니다.</p>\n<p>이러한 Observable 은 Hot Observable 과 Cold Observable 이 있습니다.</p>\n<ul>\n<li>\n<p>Hot Observable</p>\n<ul>\n<li>구독자의 존재 여부와 상관없이 데이터를 배출하는 Observable 입니다.</li>\n<li>마우스, 이벤트, 시스템 이벤트 등이 자주 사용됩니다.</li>\n<li>subscribe 하는 시점으로 발행하는 값을 받는 걸 기본으로 합니다.</li>\n</ul>\n</li>\n<li>\n<p>Cold Observable</p>\n<ul>\n<li>일반적인 Observer 를 말합니다.</li>\n<li>subscribe 되기 이전에는 데이터 스트림을 방출(emit)하지 않습니다.</li>\n<li>웹 요청, DB 쿼리 등이 사용되며 요청 시 결과를 확인할 수 있습니다.</li>\n<li>처음부터 발행하는 것을 기본으로 합니다.</li>\n</ul>\n</li>\n</ul>\n<p>기본적으로 Observable은 Cold Observable 방식이고, Subject를 사용하여 Hot Observable 을 구현할 수 있습니다.</p>\n<p>Subject 는 <code class=\"language-text\">Observable</code> 이면서 <code class=\"language-text\">Observer</code> 이기도 한 객체입니다. Hot Observable 은 subscribe 하고 있는 모든 Observer 에게 모두 전파하게 되며 각각의 Observer 들은 side effect 가 발생하게 되며 이를 multicast 방식이라고 합니다.</p>\n<p>unicast 방식일지 multicast 방식일지 구현 요구사항에 따라 Cold Observable 을 사용하거나 Hot Observable 을 사용하여 처리합니다.</p>\n<p>여기서 Observable 의 간단한 사용법에 대해 알아보도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">eventHandler</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> eventHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>기존의 DOM 이벤트를 사용하는 방식이 위와 같았다면,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> click$ <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromEvent</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">observer</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclick$<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">fromEvent</code> Operator 를 사용해 DOM 이벤트를 Observable 로 변환하여 DOM 요소에서 click 이벤트가 발생하면 이를 감지하여 연속적인 이벤트 스트림으로 만들고 이를 Notification 에 담아 Observer 에게 방출(emit)합니다. <code class=\"language-text\">subscribe</code> Operator 를 사용하여 Observer 가 Observable 을 <code class=\"language-text\">subscribe</code> 하도록 해야만 동작한다는 점입니다.</p>\n<p><code class=\"language-text\">Promise</code> 가 당신에게 건네지면, resolve 가 실행되는 것을 막을 수 있는 권한이 없어 취소할 수 없지만\n<code class=\"language-text\">subscribe</code> 를 원하지 않는다면 <code class=\"language-text\">subscribe</code> 를 취소할 수 있습니다.</p>\n<p><code class=\"language-text\">Observable</code> 이전에는 뷰에서 이벤트가 발생하면 이벤트가 발생할 때마다 한 번씩 이벤트를 처리합니다. 예를 들어 click 이벤트는 연속적으로 발생하고 일반적인 자바스크립트 애플리케이션은 이벤트가 발생할 때마다 이벤트 핸들러를 호출합니다.</p>\n<p>만약 click 이벤트가 발생될 때마다 서버에 요청을 보내는 경우 계속해서 서버에 요청을 보낼 것이며, 이러한 경우에 debounce 함수를 사용할 수도 있겠지만, 한 번 전송된 요청은 취소할 수 없기 때문에 불필요한 요청이 발생할 수 있습니다. <code class=\"language-text\">Observable</code> 은 이러한 단점을 보완하기 위해 발전된 해결 방법을 제시할 수 있습니다.</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>제너레이터와 RxJS 의 데이터를 넘겨주는 방식은 비슷하지만, 시간 축(data stream)으로 데이터를 관리한다는 점에서 RxJS 의 Observable 은 신경 써야 할 부분이 줄어들었다는 느낌을 들게 합니다.</p>\n<p>그와 더불어 Promise 와 Async/await 의 pull 방식보다 Observable 의 Push 방식이 좀 더 매력적으로 보이긴 합니다.</p>\n<p>저도 아직 RxJS 를 알아가는 단계이지만 RxJS 를 한 번 경험해보시길 추천해 드립니다.</p>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<ul>\n<li><a href=\"https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Understanding Generators in ES6 JavaScript with Examples</a></li>\n<li><a href=\"https://www.sitepoint.com/functional-reactive-programming-rxjs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Introduction to Functional Reactive Programming with RxJS</a></li>\n<li><a href=\"https://poiemaweb.com/angular-RxJS\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reactive Programming과 RxJS</a></li>\n<li><a href=\"https://medium.com/@lsh000124/reactive-programming-with-rxjs-2480c252fa9a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reactive Programming with Rxjs</a></li>\n</ul>","fields":{"slug":"/posts/Generator & RxJS","tagSlugs":["/tag/javascript/","/tag/generator/","/tag/rx-js/"]},"frontmatter":{"date":"2019-12-30","description":"제너레이터의 간단한 구조 및 예시를 소개한 다음, RxJS 에 대한 간략한 설명과 예시로 마치겠습니다.","tags":["Javascript","Generator","RxJS"],"title":"Generator & RxJS","socialImage":""}}},"pageContext":{"slug":"/posts/Generator & RxJS"}}}