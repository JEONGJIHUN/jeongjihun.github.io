{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Promise & Async/await","result":{"data":{"markdownRemark":{"id":"16379e4a-90d4-52c4-b604-6fc07b27b1df","html":"<h2 id=\"index\" style=\"position:relative;\"><a href=\"#index\" aria-label=\"index permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Index</h2>\n<ul>\n<li><strong><a href=\"#intro-javascript-briefly\">Intro Javascript briefly</a></strong></li>\n<li><strong><a href=\"#callback-function\">Callback function</a></strong></li>\n<li>\n<p><strong><a href=\"#promise\">Promise</a></strong></p>\n<ul>\n<li><a href=\"#promiseall\">Promise.all</a></li>\n<li><a href=\"#promiseallsettled\">Promise.allSettled</a></li>\n<li><a href=\"#promiserace\">Promise.race</a></li>\n</ul>\n</li>\n<li><strong><a href=\"#asyncawait\">Async/await</a></strong></li>\n</ul>\n<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Intro</strong></h2>\n<h3 id=\"intro-javascript-briefly\" style=\"position:relative;\"><a href=\"#intro-javascript-briefly\" aria-label=\"intro javascript briefly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro Javascript briefly</h3>\n<p>자바스크립트에 대한 간략한 설명과 callback 에 대해 설명.그 후, Promise 와 Async/await 에 대해 알아보려고 합니다.</p>\n<h2 id=\"main\" style=\"position:relative;\"><a href=\"#main\" aria-label=\"main permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Main</strong></h2>\n<p>자바스크립트는 <strong><code class=\"language-text\">A single threaded non-blocking asynchronous concurrent language</code></strong> 로써 대부분의 액션이 비동기로 처리됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/29101760/55602783-3fe80700-57a2-11e9-9c27-3d87200694f2.png\" alt=\"orderOfExecution\"></p>\n<p>setTimeout 을 사용 시 비동기로 동작하기 때문에 wait time 은 큐에 들어갔을 때부터 실행됩니다. 비동기적으로 동작하는 함수들은 완료 시점을 알 수 없기 떄문에 콜백 함수를 사용해 함수 내 동작이 모두 처리된 후 실행되어야 하는 함수가 들어갈 콜백을 인수로 반드시 제공해야 합니다.</p>\n<h3 id=\"callback-function\" style=\"position:relative;\"><a href=\"#callback-function\" aria-label=\"callback function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Callback function</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.domain.com/artist/artistName/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">favoriteData</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>favoriteData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>콜백 함수의 콜백을 부르고 싶다면?!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">favoriteData</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">someFn1</span><span class=\"token punctuation\">(</span>favoriteData<span class=\"token punctuation\">,</span> <span class=\"token parameter\">someFn2</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>someFn2<span class=\"token punctuation\">,</span> <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> <span class=\"token parameter\">blabla</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 콜백을 부르는 횟수가 많아진다면, 다들 아시는 콜백 지옥(Callback Hell)을 맛볼 수 있습니다. 각각의 독립적인 함수로 만들어 조금 더 깔끔해 보일 수 있지만, 콜백 패턴이 처리순서를 보장할 수 없는 문제점들을 개선하기 위해 Promise 라는 개념을 도입했습니다.</p>\n<h3 id=\"promise\" style=\"position:relative;\"><a href=\"#promise\" aria-label=\"promise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise</h3>\n<blockquote>\n<p>Promise 객체는 비동기 연산의 최종 완료(또는 실패)와 그 결과값을 나타냅니다.</p>\n</blockquote>\n<p>MDN 에서 정의하는 Promise 입니다.</p>\n<blockquote>\n<p>new Promise(executor) 에서 executor 라는 파라미터는 <code class=\"language-text\">resolve</code> 와 <code class=\"language-text\">reject</code> 인수를 전달할 실행함수로 보통 어떤 비동기 작업을 시작한 후 모든 작업을 끝내면 resolve를 호출해 프로미스를 <code class=\"language-text\">fulfilled</code> 하고, 오류가 발생한 경우 reject를 호출해 <code class=\"language-text\">rejected</code> 합니다. 실행 함수에서 오류를 던지면 프로미스는 거부됩니다. 실행 함수의 반환 값은 무시됩니다.</p>\n</blockquote>\n<p>프로미스는 하나의 객체로 미래의 특정 값을 생성하며 3가지의 상태 값을 가지고 있습니다.</p>\n<ul>\n<li>Pending(대기) : 비동기 처리 로직이 아직 완료되지 않은 상태</li>\n<li>Fullfilled(이행) : 비동기 처리가 완료되어 프로미스가 결과값을 반환해 준 상태</li>\n<li>Rejected(거부) : 비동기 처리가 실패하거나 오류가 발생한 상태</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/29101760/70390663-73a1bd80-1a10-11ea-8f41-1de1d32c2ff8.png\" alt=\"promise\"></p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN 참조</a></p>\n</blockquote>\n<p>프로미스의 내부 프로퍼티는 state 와 result 가 있고 처음엔 state 는 <code class=\"language-text\">pending</code> 상태에서 <code class=\"language-text\">fulfilled</code> 또는 <code class=\"language-text\">rejected</code> 상태로 변하고, result 는 처음엔 <code class=\"language-text\">undefined</code> 상태에서 <code class=\"language-text\">value</code> 또는 <code class=\"language-text\">error</code> 상태로 변합니다. executor 는 둘 중 하나의 상태로만 변경시킵니다. state 와 result 는 내부 프로퍼티이므로 직접 접근할 수 없고 <code class=\"language-text\">then, catch, finally</code> 메서드로 접근할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>then 의 첫 번째 인수는 프로미스가 이행되었을 때 실행되는 함수이고, result를 받습니다.\n두 번째 인수는 프로미스가 거부되었을 때 실행되는 함수이고, error를 받습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getArtistData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> artist<span class=\"token punctuation\">;</span>\n    artist<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    artist<span class=\"token punctuation\">.</span>dataDidNotFetch <span class=\"token operator\">=</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아티스트 데이터를 가져오지 못했습니다.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ngetArtistData<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">artist</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>artist<span class=\"token punctuation\">.</span>data<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">를 불러왔습니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>프로미스를 사용하면 콜백 함수를 사용하지 않고 해당 함수의 실행이 끝났을 때 그 결과값에 따라 <code class=\"language-text\">then</code> 으로 핸들러를 추가할 수 있습니다. 프로미스 체이닝을 사용해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token comment\">// then/catch</span>\ngetArtistData<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">artist</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>artist<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">가 발생했습니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//then(result,error)</span>\ngetArtistData<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">가 발생했습니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">artist</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>artist<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>여기서 데이터를 가져올 수 없는 상항이 발생했을 때 <code class=\"language-text\">catch</code> 문을 사용할 수 있습니다. <code class=\"language-text\">catch(foo)</code> 와 <code class=\"language-text\">then(null,foo)</code> 는 완벽하게 동일합니다. catch 문이 간결하고 직관적이라 error handling 시 자주 사용합니다.</p>\n<h4 id=\"promiseall\" style=\"position:relative;\"><a href=\"#promiseall\" aria-label=\"promiseall permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Promise.all</strong></h4>\n<p><code class=\"language-text\">Promise.all(iterable)</code> 은 iterable 내의 모든 프로미스가 이행한 뒤 이행하고, 어떤 프로미스가 거부하면 즉시 거부하는 프로미스를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">resolvedvalue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> time</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rejectedvalue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> time</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token function\">resolvedvalue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">resolvedvalue</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">resolvedvalue</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n  after 3 sec\n  [1, 2, 3]\n*/</span></code></pre></div>\n<p>위의 반환되는 프로미스는 [1,2,3] 으로 첫 번쨰 프로미스가 가장 늦게 이행되더라도 결과는 배열의 첫 번째 요소로 저장됩니다.</p>\n<h4 id=\"promiseallsettled\" style=\"position:relative;\"><a href=\"#promiseallsettled\" aria-label=\"promiseallsettled permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Promise.allSettled</strong></h4>\n<p>먼저 브라우저 호환성을 확인하시고 사용하시길 바랍니다.\n모든 프로미스가 처리될 때까지 기다립니다. 내부 프로퍼티는 <code class=\"language-text\">status</code> 와 <code class=\"language-text\">value/reason</code> 을 가지고 있습니다.\n<code class=\"language-text\">status</code> 는 <code class=\"language-text\">fulfilled</code> 와 <code class=\"language-text\">rejected</code> 가 있고 이행됐을 시 <code class=\"language-text\">value</code> 값을 가지고 거부됐을 시 <code class=\"language-text\">reason</code> 값을 가집니다. 예를 들면</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> urls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>artistUrlA<span class=\"token punctuation\">,</span> artistUrlB<span class=\"token punctuation\">,</span> artistUrlC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise<span class=\"token punctuation\">.</span>allSettled</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  results<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">\"fulfilled\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>urls<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token string\">\"rejected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>urls<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>reason<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"promiserace\" style=\"position:relative;\"><a href=\"#promiserace\" aria-label=\"promiserace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Promise.race</strong></h4>\n<p>가장 먼저 처리되는 프로미스의 결과값을 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise<span class=\"token punctuation\">.</span>race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token function\">resolvedvalue</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">rejectedvalue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">resolvedvalue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n  제일 처음 반환하는 값인\n  1 이 반환됩니다.\n*/</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>위의 결과는 가장 빨리 처리된 첫 번째 프로미스의 결과 값을 보여줍니다.</p>\n<p><code class=\"language-text\">Promise.resolve(value)</code> – 주어진 값을 사용해 이행 상태의 프로미스를 만듭니다.<br>\n<code class=\"language-text\">Promise.reject(error</code> – 주어진 에러를 사용해 거부 상태의 프로미스를 만듭니다.</p>\n<p>이것으로 Promise 의 소개를 마치고 Async/await 를 알아보겠습니다.</p>\n<h3 id=\"asyncawait\" style=\"position:relative;\"><a href=\"#asyncawait\" aria-label=\"asyncawait permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async/await</h3>\n<p>비동기 코드의 겉모습과 동작을 좀 더 동기 코드와 유사하게 만들어 줍니다. 이것이 async/await의 가장 큰 장점입니다. <strong>async 함수는 프로미스 값을 반환합니다.</strong> 프로미스가 아닌 값을 반환하더라도 resolve 로 감싸 프로미스로 변환 후 반환합니다.</p>\n<p>await 는 async 함수 안에서만 사용 가능합니다. Promise.then 보다 가독성이 좋습니다.\nasync/await를 사용하면 promise.then/catch가 거의 필요 없습니다. 하지만 가끔 promise 를 써야만 하는 경우가 생깁니다. (가장 바깥 스코프에서 비동기 처리가 필요하다거나)</p>\n<p>async/await 를 사용하면 제너레이터와 이터레이터가 빠질 수 없습니다. generator function 은 Generator 객체를 반환합니다. Generator 는 빠져나갔다가 나중에 돌아올 수 있는 함수입니다. 이때 컨텍스트는 저장된 상태로 남아 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/29101760/70849872-9546ed00-1ec7-11ea-9db4-8ae75b7b068d.png\" alt=\"generator\"></p>\n<p><strong>➀</strong> Generator 함수는 호출되어도 즉시 실행되지 않고, 대신 함수를 위한 Iterator 객체가 반환됩니다.</p>\n<p><strong>➁</strong> Iterator 의 next() 메서드를 호출하면 Generator 함수가 실행되어 yield 문을 만날 때까지 진행하고, 해당 표현 식이 명시하는 Iterator 로부터의 반환값을 반환합니다. <code class=\"language-text\">yield*</code> 표현식을 마주칠 경우, 다른 Generator 함수가 위임되어 진행됩니다.</p>\n<p><strong>➂</strong> 이후 <code class=\"language-text\">next()</code> 메서드가 호출되면 진행이 멈췄던 위치에서부터 재실행합니다. <code class=\"language-text\">next()</code> 가 반환하는 객체는 yield 문이 반환할 값을 나타내는 <code class=\"language-text\">value</code> 속성과, Generator 함수 안의 모든 yield 문의 실행 여부를 표시하는 boolean 타입의 <code class=\"language-text\">done</code> 속성을 갖습니다. 예) “{value:<code class=\"language-text\">value</code>, done:true || false}”</p>\n<p><strong>➃</strong> <code class=\"language-text\">next()</code> 를 인자값과 함께 호출할 경우, 진행을 멈췄던 위치의 yield 문을 <code class=\"language-text\">next()</code> 메서드에서 받은 인자값으로 치환하고 그 위치에서 다시 실행하게 됩니다.</p>\n<p>그렇기에 제너레이터는 일종의 코루틴으로 돌아갈 위치를 직접 지정할 수 없고, 단순히 호출자에게 제어권을 넘겨주기 때문에 세미 코루틴이라 불립니다.</p>\n<p>제너레이터는 이터레이터입니다. 모든 제너레이터에서는 <code class=\"language-text\">next()</code> 와 <code class=\"language-text\">[symbol.iterator]()</code> 를 내장하고 있습니다.</p>\n<p>제너레이터의 경우 리턴값이 이터레이터이므로, 각 yield에서 작업이 중단되면 <code class=\"language-text\">next()</code> 를 통해 다음의 작업으로 넘어가야 하지만</p>\n<p>Async-await의 경우 promise의 resolve가 반환될때 까지 기다려주기 때문에 별도의 모듈을 사용할 필요가 없습니다.</p>\n<ul>\n<li>Generator: “{value:<code class=\"language-text\">value</code>, done:true || false}” 형태의 이터레이션 객체를 반환합니다.</li>\n<li>Async/await: 프로미스가 아닌 값을 반환하더라도 resolve 로 감싸 프로미스로 변환 후 반환합니다. await 는 프로미스가 처리될 때까지 기다린 후 결과값을 반환합니다.</li>\n</ul>\n<p>제너레이터는 2부에서 더 알아보도록 하겠습니다.</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Conclusion</strong></h2>\n<ul>\n<li><strong>Promise => structured callback</strong></li>\n<li><strong>Async/await => generator,iterator + promise</strong></li>\n</ul>\n<p><strong>async 가 직관적이긴하나, 성능 향상에 대해서 생각한다면 promise 와 async/await 를 어떻게 사용하면 적시 적소에 <em>(한 번에 여러 개의 프로미스를 기다릴 수 없기 때문에 병렬적으로 처리해야 할 때는 <code class=\"language-text\">new Promise.all</code> 을 사용한다든지 상황에)</em> 맞게 사용할 수 있을지 고민해보고 판단하여 사용하길 바랍니다.</strong></p>\n<p style=\"color:#ddd\"> 시간이 된다면 다음 편으로 Python 의 async/await 와 Javascript 의 async/await 를 비교기를 작성하고 싶다..</p>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>References</strong></h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a></li>\n<li><a href=\"https://javascript.info\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Modern JavaScript Tutorial</a></li>\n<li><a href=\"https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Understanding Generators in ES6 JavaScript with Examples</a></li>\n</ul>","fields":{"slug":"/posts/Promise & Async/await","tagSlugs":["/tag/javascript/","/tag/promise/","/tag/async-await/"]},"frontmatter":{"date":"2019-12-23","description":"자바스크립트에 대한 간략한 설명과 callback 에 대해 설명.그 후, Promise 와 Async/await 에 대해 알아보려고 합니다.","tags":["Javascript","Promise","Async/await"],"title":"Promise & Async/await","socialImage":""}}},"pageContext":{"slug":"/posts/Promise & Async/await"}}}